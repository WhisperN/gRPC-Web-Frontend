// source: Flight.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.arrow.flight.protocol.Action', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.ActionType', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.BasicAuth', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.CancelFlightInfoRequest', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.CancelFlightInfoResult', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.CancelStatus', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.CloseSessionRequest', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.CloseSessionResult', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.CloseSessionResult.Status', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.Criteria', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.Empty', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.FlightData', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.FlightDescriptor', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.FlightDescriptor.DescriptorType', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.FlightEndpoint', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.FlightInfo', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.GetSessionOptionsRequest', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.GetSessionOptionsResult', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.HandshakeRequest', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.HandshakeResponse', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.Location', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.PollInfo', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.PutResult', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.RenewFlightEndpointRequest', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.Result', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.SchemaResult', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.SessionOptionValue', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.SessionOptionValue.OptionValueCase', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.SessionOptionValue.StringListValue', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.SetSessionOptionsRequest', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.SetSessionOptionsResult', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.SetSessionOptionsResult.Error', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.SetSessionOptionsResult.ErrorValue', null, global);
goog.exportSymbol('proto.arrow.flight.protocol.Ticket', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.HandshakeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.HandshakeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.HandshakeRequest.displayName = 'proto.arrow.flight.protocol.HandshakeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.HandshakeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.HandshakeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.HandshakeResponse.displayName = 'proto.arrow.flight.protocol.HandshakeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.BasicAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.BasicAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.BasicAuth.displayName = 'proto.arrow.flight.protocol.BasicAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.Empty.displayName = 'proto.arrow.flight.protocol.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.ActionType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.ActionType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.ActionType.displayName = 'proto.arrow.flight.protocol.ActionType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.Criteria = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.Criteria, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.Criteria.displayName = 'proto.arrow.flight.protocol.Criteria';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.Action.displayName = 'proto.arrow.flight.protocol.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.Result.displayName = 'proto.arrow.flight.protocol.Result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.SchemaResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.SchemaResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.SchemaResult.displayName = 'proto.arrow.flight.protocol.SchemaResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.FlightDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.arrow.flight.protocol.FlightDescriptor.repeatedFields_, null);
};
goog.inherits(proto.arrow.flight.protocol.FlightDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.FlightDescriptor.displayName = 'proto.arrow.flight.protocol.FlightDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.FlightInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.arrow.flight.protocol.FlightInfo.repeatedFields_, null);
};
goog.inherits(proto.arrow.flight.protocol.FlightInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.FlightInfo.displayName = 'proto.arrow.flight.protocol.FlightInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.PollInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.PollInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.PollInfo.displayName = 'proto.arrow.flight.protocol.PollInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.CancelFlightInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.CancelFlightInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.CancelFlightInfoRequest.displayName = 'proto.arrow.flight.protocol.CancelFlightInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.CancelFlightInfoResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.CancelFlightInfoResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.CancelFlightInfoResult.displayName = 'proto.arrow.flight.protocol.CancelFlightInfoResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.Ticket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.Ticket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.Ticket.displayName = 'proto.arrow.flight.protocol.Ticket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.Location.displayName = 'proto.arrow.flight.protocol.Location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.FlightEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.arrow.flight.protocol.FlightEndpoint.repeatedFields_, null);
};
goog.inherits(proto.arrow.flight.protocol.FlightEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.FlightEndpoint.displayName = 'proto.arrow.flight.protocol.FlightEndpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.RenewFlightEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.RenewFlightEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.RenewFlightEndpointRequest.displayName = 'proto.arrow.flight.protocol.RenewFlightEndpointRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.FlightData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.arrow.flight.protocol.FlightData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.FlightData.displayName = 'proto.arrow.flight.protocol.FlightData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.PutResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.PutResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.PutResult.displayName = 'proto.arrow.flight.protocol.PutResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.SessionOptionValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_);
};
goog.inherits(proto.arrow.flight.protocol.SessionOptionValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.SessionOptionValue.displayName = 'proto.arrow.flight.protocol.SessionOptionValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.arrow.flight.protocol.SessionOptionValue.StringListValue.repeatedFields_, null);
};
goog.inherits(proto.arrow.flight.protocol.SessionOptionValue.StringListValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.SessionOptionValue.StringListValue.displayName = 'proto.arrow.flight.protocol.SessionOptionValue.StringListValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.SetSessionOptionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.SetSessionOptionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.SetSessionOptionsRequest.displayName = 'proto.arrow.flight.protocol.SetSessionOptionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.SetSessionOptionsResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.SetSessionOptionsResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.SetSessionOptionsResult.displayName = 'proto.arrow.flight.protocol.SetSessionOptionsResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.SetSessionOptionsResult.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.SetSessionOptionsResult.Error.displayName = 'proto.arrow.flight.protocol.SetSessionOptionsResult.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.GetSessionOptionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.GetSessionOptionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.GetSessionOptionsRequest.displayName = 'proto.arrow.flight.protocol.GetSessionOptionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.GetSessionOptionsResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.GetSessionOptionsResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.GetSessionOptionsResult.displayName = 'proto.arrow.flight.protocol.GetSessionOptionsResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.CloseSessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.CloseSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.CloseSessionRequest.displayName = 'proto.arrow.flight.protocol.CloseSessionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrow.flight.protocol.CloseSessionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrow.flight.protocol.CloseSessionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrow.flight.protocol.CloseSessionResult.displayName = 'proto.arrow.flight.protocol.CloseSessionResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.HandshakeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.HandshakeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.HandshakeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.HandshakeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocolVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.HandshakeRequest}
 */
proto.arrow.flight.protocol.HandshakeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.HandshakeRequest;
  return proto.arrow.flight.protocol.HandshakeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.HandshakeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.HandshakeRequest}
 */
proto.arrow.flight.protocol.HandshakeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProtocolVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.HandshakeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.HandshakeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.HandshakeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.HandshakeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocolVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 protocol_version = 1;
 * @return {number}
 */
proto.arrow.flight.protocol.HandshakeRequest.prototype.getProtocolVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.arrow.flight.protocol.HandshakeRequest} returns this
 */
proto.arrow.flight.protocol.HandshakeRequest.prototype.setProtocolVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {string}
 */
proto.arrow.flight.protocol.HandshakeRequest.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.arrow.flight.protocol.HandshakeRequest.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.HandshakeRequest.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.HandshakeRequest} returns this
 */
proto.arrow.flight.protocol.HandshakeRequest.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.HandshakeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.HandshakeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.HandshakeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.HandshakeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocolVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.HandshakeResponse}
 */
proto.arrow.flight.protocol.HandshakeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.HandshakeResponse;
  return proto.arrow.flight.protocol.HandshakeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.HandshakeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.HandshakeResponse}
 */
proto.arrow.flight.protocol.HandshakeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProtocolVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.HandshakeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.HandshakeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.HandshakeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.HandshakeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocolVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 protocol_version = 1;
 * @return {number}
 */
proto.arrow.flight.protocol.HandshakeResponse.prototype.getProtocolVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.arrow.flight.protocol.HandshakeResponse} returns this
 */
proto.arrow.flight.protocol.HandshakeResponse.prototype.setProtocolVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {string}
 */
proto.arrow.flight.protocol.HandshakeResponse.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.arrow.flight.protocol.HandshakeResponse.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.HandshakeResponse.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.HandshakeResponse} returns this
 */
proto.arrow.flight.protocol.HandshakeResponse.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.BasicAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.BasicAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.BasicAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.BasicAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.BasicAuth}
 */
proto.arrow.flight.protocol.BasicAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.BasicAuth;
  return proto.arrow.flight.protocol.BasicAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.BasicAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.BasicAuth}
 */
proto.arrow.flight.protocol.BasicAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.BasicAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.BasicAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.BasicAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.BasicAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.arrow.flight.protocol.BasicAuth.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.arrow.flight.protocol.BasicAuth} returns this
 */
proto.arrow.flight.protocol.BasicAuth.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.arrow.flight.protocol.BasicAuth.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.arrow.flight.protocol.BasicAuth} returns this
 */
proto.arrow.flight.protocol.BasicAuth.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.Empty}
 */
proto.arrow.flight.protocol.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.Empty;
  return proto.arrow.flight.protocol.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.Empty}
 */
proto.arrow.flight.protocol.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.ActionType.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.ActionType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.ActionType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.ActionType.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.ActionType}
 */
proto.arrow.flight.protocol.ActionType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.ActionType;
  return proto.arrow.flight.protocol.ActionType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.ActionType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.ActionType}
 */
proto.arrow.flight.protocol.ActionType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.ActionType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.ActionType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.ActionType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.ActionType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.arrow.flight.protocol.ActionType.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.arrow.flight.protocol.ActionType} returns this
 */
proto.arrow.flight.protocol.ActionType.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.arrow.flight.protocol.ActionType.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.arrow.flight.protocol.ActionType} returns this
 */
proto.arrow.flight.protocol.ActionType.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.Criteria.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.Criteria.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.Criteria} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Criteria.toObject = function(includeInstance, msg) {
  var f, obj = {
    expression: msg.getExpression_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.Criteria}
 */
proto.arrow.flight.protocol.Criteria.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.Criteria;
  return proto.arrow.flight.protocol.Criteria.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.Criteria} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.Criteria}
 */
proto.arrow.flight.protocol.Criteria.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExpression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.Criteria.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.Criteria.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.Criteria} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Criteria.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpression_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes expression = 1;
 * @return {string}
 */
proto.arrow.flight.protocol.Criteria.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes expression = 1;
 * This is a type-conversion wrapper around `getExpression()`
 * @return {string}
 */
proto.arrow.flight.protocol.Criteria.prototype.getExpression_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExpression()));
};


/**
 * optional bytes expression = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExpression()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.Criteria.prototype.getExpression_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExpression()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.Criteria} returns this
 */
proto.arrow.flight.protocol.Criteria.prototype.setExpression = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.Action}
 */
proto.arrow.flight.protocol.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.Action;
  return proto.arrow.flight.protocol.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.Action}
 */
proto.arrow.flight.protocol.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.arrow.flight.protocol.Action.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.arrow.flight.protocol.Action} returns this
 */
proto.arrow.flight.protocol.Action.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {string}
 */
proto.arrow.flight.protocol.Action.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.arrow.flight.protocol.Action.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.Action.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.Action} returns this
 */
proto.arrow.flight.protocol.Action.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.Result}
 */
proto.arrow.flight.protocol.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.Result;
  return proto.arrow.flight.protocol.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.Result}
 */
proto.arrow.flight.protocol.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes body = 1;
 * @return {string}
 */
proto.arrow.flight.protocol.Result.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.arrow.flight.protocol.Result.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.Result.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.Result} returns this
 */
proto.arrow.flight.protocol.Result.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.SchemaResult.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.SchemaResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.SchemaResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SchemaResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    schema: msg.getSchema_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.SchemaResult}
 */
proto.arrow.flight.protocol.SchemaResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.SchemaResult;
  return proto.arrow.flight.protocol.SchemaResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.SchemaResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.SchemaResult}
 */
proto.arrow.flight.protocol.SchemaResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.SchemaResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.SchemaResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.SchemaResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SchemaResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchema_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes schema = 1;
 * @return {string}
 */
proto.arrow.flight.protocol.SchemaResult.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes schema = 1;
 * This is a type-conversion wrapper around `getSchema()`
 * @return {string}
 */
proto.arrow.flight.protocol.SchemaResult.prototype.getSchema_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSchema()));
};


/**
 * optional bytes schema = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSchema()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.SchemaResult.prototype.getSchema_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSchema()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.SchemaResult} returns this
 */
proto.arrow.flight.protocol.SchemaResult.prototype.setSchema = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.arrow.flight.protocol.FlightDescriptor.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.FlightDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.FlightDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.FlightDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cmd: msg.getCmd_asB64(),
    pathList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.FlightDescriptor}
 */
proto.arrow.flight.protocol.FlightDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.FlightDescriptor;
  return proto.arrow.flight.protocol.FlightDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.FlightDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.FlightDescriptor}
 */
proto.arrow.flight.protocol.FlightDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.arrow.flight.protocol.FlightDescriptor.DescriptorType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCmd(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.FlightDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.FlightDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.FlightDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCmd_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.arrow.flight.protocol.FlightDescriptor.DescriptorType = {
  UNKNOWN: 0,
  PATH: 1,
  CMD: 2
};

/**
 * optional DescriptorType type = 1;
 * @return {!proto.arrow.flight.protocol.FlightDescriptor.DescriptorType}
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.getType = function() {
  return /** @type {!proto.arrow.flight.protocol.FlightDescriptor.DescriptorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.arrow.flight.protocol.FlightDescriptor.DescriptorType} value
 * @return {!proto.arrow.flight.protocol.FlightDescriptor} returns this
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes cmd = 2;
 * @return {string}
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.getCmd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes cmd = 2;
 * This is a type-conversion wrapper around `getCmd()`
 * @return {string}
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.getCmd_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCmd()));
};


/**
 * optional bytes cmd = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCmd()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.getCmd_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCmd()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.FlightDescriptor} returns this
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.setCmd = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated string path = 3;
 * @return {!Array<string>}
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.getPathList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.arrow.flight.protocol.FlightDescriptor} returns this
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.setPathList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.arrow.flight.protocol.FlightDescriptor} returns this
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.addPath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.arrow.flight.protocol.FlightDescriptor} returns this
 */
proto.arrow.flight.protocol.FlightDescriptor.prototype.clearPathList = function() {
  return this.setPathList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.arrow.flight.protocol.FlightInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.FlightInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.FlightInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.FlightInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    schema: msg.getSchema_asB64(),
    flightDescriptor: (f = msg.getFlightDescriptor()) && proto.arrow.flight.protocol.FlightDescriptor.toObject(includeInstance, f),
    endpointList: jspb.Message.toObjectList(msg.getEndpointList(),
    proto.arrow.flight.protocol.FlightEndpoint.toObject, includeInstance),
    totalRecords: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalBytes: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ordered: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    appMetadata: msg.getAppMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.FlightInfo}
 */
proto.arrow.flight.protocol.FlightInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.FlightInfo;
  return proto.arrow.flight.protocol.FlightInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.FlightInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.FlightInfo}
 */
proto.arrow.flight.protocol.FlightInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSchema(value);
      break;
    case 2:
      var value = new proto.arrow.flight.protocol.FlightDescriptor;
      reader.readMessage(value,proto.arrow.flight.protocol.FlightDescriptor.deserializeBinaryFromReader);
      msg.setFlightDescriptor(value);
      break;
    case 3:
      var value = new proto.arrow.flight.protocol.FlightEndpoint;
      reader.readMessage(value,proto.arrow.flight.protocol.FlightEndpoint.deserializeBinaryFromReader);
      msg.addEndpoint(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalRecords(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalBytes(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOrdered(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.FlightInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.FlightInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.FlightInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchema_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFlightDescriptor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.arrow.flight.protocol.FlightDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getEndpointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.arrow.flight.protocol.FlightEndpoint.serializeBinaryToWriter
    );
  }
  f = message.getTotalRecords();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTotalBytes();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getOrdered();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getAppMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional bytes schema = 1;
 * @return {string}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes schema = 1;
 * This is a type-conversion wrapper around `getSchema()`
 * @return {string}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.getSchema_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSchema()));
};


/**
 * optional bytes schema = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSchema()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.getSchema_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSchema()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.FlightInfo} returns this
 */
proto.arrow.flight.protocol.FlightInfo.prototype.setSchema = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional FlightDescriptor flight_descriptor = 2;
 * @return {?proto.arrow.flight.protocol.FlightDescriptor}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.getFlightDescriptor = function() {
  return /** @type{?proto.arrow.flight.protocol.FlightDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.arrow.flight.protocol.FlightDescriptor, 2));
};


/**
 * @param {?proto.arrow.flight.protocol.FlightDescriptor|undefined} value
 * @return {!proto.arrow.flight.protocol.FlightInfo} returns this
*/
proto.arrow.flight.protocol.FlightInfo.prototype.setFlightDescriptor = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.arrow.flight.protocol.FlightInfo} returns this
 */
proto.arrow.flight.protocol.FlightInfo.prototype.clearFlightDescriptor = function() {
  return this.setFlightDescriptor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.hasFlightDescriptor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated FlightEndpoint endpoint = 3;
 * @return {!Array<!proto.arrow.flight.protocol.FlightEndpoint>}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.getEndpointList = function() {
  return /** @type{!Array<!proto.arrow.flight.protocol.FlightEndpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.arrow.flight.protocol.FlightEndpoint, 3));
};


/**
 * @param {!Array<!proto.arrow.flight.protocol.FlightEndpoint>} value
 * @return {!proto.arrow.flight.protocol.FlightInfo} returns this
*/
proto.arrow.flight.protocol.FlightInfo.prototype.setEndpointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.arrow.flight.protocol.FlightEndpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.arrow.flight.protocol.FlightEndpoint}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.addEndpoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.arrow.flight.protocol.FlightEndpoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.arrow.flight.protocol.FlightInfo} returns this
 */
proto.arrow.flight.protocol.FlightInfo.prototype.clearEndpointList = function() {
  return this.setEndpointList([]);
};


/**
 * optional int64 total_records = 4;
 * @return {number}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.getTotalRecords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.arrow.flight.protocol.FlightInfo} returns this
 */
proto.arrow.flight.protocol.FlightInfo.prototype.setTotalRecords = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 total_bytes = 5;
 * @return {number}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.getTotalBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.arrow.flight.protocol.FlightInfo} returns this
 */
proto.arrow.flight.protocol.FlightInfo.prototype.setTotalBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool ordered = 6;
 * @return {boolean}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.getOrdered = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.arrow.flight.protocol.FlightInfo} returns this
 */
proto.arrow.flight.protocol.FlightInfo.prototype.setOrdered = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bytes app_metadata = 7;
 * @return {string}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.getAppMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes app_metadata = 7;
 * This is a type-conversion wrapper around `getAppMetadata()`
 * @return {string}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.getAppMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppMetadata()));
};


/**
 * optional bytes app_metadata = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppMetadata()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.FlightInfo.prototype.getAppMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.FlightInfo} returns this
 */
proto.arrow.flight.protocol.FlightInfo.prototype.setAppMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.PollInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.PollInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.PollInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.PollInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.arrow.flight.protocol.FlightInfo.toObject(includeInstance, f),
    flightDescriptor: (f = msg.getFlightDescriptor()) && proto.arrow.flight.protocol.FlightDescriptor.toObject(includeInstance, f),
    progress: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    expirationTime: (f = msg.getExpirationTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.PollInfo}
 */
proto.arrow.flight.protocol.PollInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.PollInfo;
  return proto.arrow.flight.protocol.PollInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.PollInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.PollInfo}
 */
proto.arrow.flight.protocol.PollInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.arrow.flight.protocol.FlightInfo;
      reader.readMessage(value,proto.arrow.flight.protocol.FlightInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 2:
      var value = new proto.arrow.flight.protocol.FlightDescriptor;
      reader.readMessage(value,proto.arrow.flight.protocol.FlightDescriptor.deserializeBinaryFromReader);
      msg.setFlightDescriptor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProgress(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpirationTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.PollInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.PollInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.PollInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.PollInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.arrow.flight.protocol.FlightInfo.serializeBinaryToWriter
    );
  }
  f = message.getFlightDescriptor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.arrow.flight.protocol.FlightDescriptor.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getExpirationTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional FlightInfo info = 1;
 * @return {?proto.arrow.flight.protocol.FlightInfo}
 */
proto.arrow.flight.protocol.PollInfo.prototype.getInfo = function() {
  return /** @type{?proto.arrow.flight.protocol.FlightInfo} */ (
    jspb.Message.getWrapperField(this, proto.arrow.flight.protocol.FlightInfo, 1));
};


/**
 * @param {?proto.arrow.flight.protocol.FlightInfo|undefined} value
 * @return {!proto.arrow.flight.protocol.PollInfo} returns this
*/
proto.arrow.flight.protocol.PollInfo.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.arrow.flight.protocol.PollInfo} returns this
 */
proto.arrow.flight.protocol.PollInfo.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.PollInfo.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FlightDescriptor flight_descriptor = 2;
 * @return {?proto.arrow.flight.protocol.FlightDescriptor}
 */
proto.arrow.flight.protocol.PollInfo.prototype.getFlightDescriptor = function() {
  return /** @type{?proto.arrow.flight.protocol.FlightDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.arrow.flight.protocol.FlightDescriptor, 2));
};


/**
 * @param {?proto.arrow.flight.protocol.FlightDescriptor|undefined} value
 * @return {!proto.arrow.flight.protocol.PollInfo} returns this
*/
proto.arrow.flight.protocol.PollInfo.prototype.setFlightDescriptor = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.arrow.flight.protocol.PollInfo} returns this
 */
proto.arrow.flight.protocol.PollInfo.prototype.clearFlightDescriptor = function() {
  return this.setFlightDescriptor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.PollInfo.prototype.hasFlightDescriptor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double progress = 3;
 * @return {number}
 */
proto.arrow.flight.protocol.PollInfo.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.arrow.flight.protocol.PollInfo} returns this
 */
proto.arrow.flight.protocol.PollInfo.prototype.setProgress = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.arrow.flight.protocol.PollInfo} returns this
 */
proto.arrow.flight.protocol.PollInfo.prototype.clearProgress = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.PollInfo.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp expiration_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.arrow.flight.protocol.PollInfo.prototype.getExpirationTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.arrow.flight.protocol.PollInfo} returns this
*/
proto.arrow.flight.protocol.PollInfo.prototype.setExpirationTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.arrow.flight.protocol.PollInfo} returns this
 */
proto.arrow.flight.protocol.PollInfo.prototype.clearExpirationTime = function() {
  return this.setExpirationTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.PollInfo.prototype.hasExpirationTime = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.CancelFlightInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.CancelFlightInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.CancelFlightInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.CancelFlightInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.arrow.flight.protocol.FlightInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.CancelFlightInfoRequest}
 */
proto.arrow.flight.protocol.CancelFlightInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.CancelFlightInfoRequest;
  return proto.arrow.flight.protocol.CancelFlightInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.CancelFlightInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.CancelFlightInfoRequest}
 */
proto.arrow.flight.protocol.CancelFlightInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.arrow.flight.protocol.FlightInfo;
      reader.readMessage(value,proto.arrow.flight.protocol.FlightInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.CancelFlightInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.CancelFlightInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.CancelFlightInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.CancelFlightInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.arrow.flight.protocol.FlightInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional FlightInfo info = 1;
 * @return {?proto.arrow.flight.protocol.FlightInfo}
 */
proto.arrow.flight.protocol.CancelFlightInfoRequest.prototype.getInfo = function() {
  return /** @type{?proto.arrow.flight.protocol.FlightInfo} */ (
    jspb.Message.getWrapperField(this, proto.arrow.flight.protocol.FlightInfo, 1));
};


/**
 * @param {?proto.arrow.flight.protocol.FlightInfo|undefined} value
 * @return {!proto.arrow.flight.protocol.CancelFlightInfoRequest} returns this
*/
proto.arrow.flight.protocol.CancelFlightInfoRequest.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.arrow.flight.protocol.CancelFlightInfoRequest} returns this
 */
proto.arrow.flight.protocol.CancelFlightInfoRequest.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.CancelFlightInfoRequest.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.CancelFlightInfoResult.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.CancelFlightInfoResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.CancelFlightInfoResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.CancelFlightInfoResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.CancelFlightInfoResult}
 */
proto.arrow.flight.protocol.CancelFlightInfoResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.CancelFlightInfoResult;
  return proto.arrow.flight.protocol.CancelFlightInfoResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.CancelFlightInfoResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.CancelFlightInfoResult}
 */
proto.arrow.flight.protocol.CancelFlightInfoResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.arrow.flight.protocol.CancelStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.CancelFlightInfoResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.CancelFlightInfoResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.CancelFlightInfoResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.CancelFlightInfoResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional CancelStatus status = 1;
 * @return {!proto.arrow.flight.protocol.CancelStatus}
 */
proto.arrow.flight.protocol.CancelFlightInfoResult.prototype.getStatus = function() {
  return /** @type {!proto.arrow.flight.protocol.CancelStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.arrow.flight.protocol.CancelStatus} value
 * @return {!proto.arrow.flight.protocol.CancelFlightInfoResult} returns this
 */
proto.arrow.flight.protocol.CancelFlightInfoResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.Ticket.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.Ticket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.Ticket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Ticket.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticket: msg.getTicket_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.Ticket}
 */
proto.arrow.flight.protocol.Ticket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.Ticket;
  return proto.arrow.flight.protocol.Ticket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.Ticket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.Ticket}
 */
proto.arrow.flight.protocol.Ticket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTicket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.Ticket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.Ticket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.Ticket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Ticket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicket_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes ticket = 1;
 * @return {string}
 */
proto.arrow.flight.protocol.Ticket.prototype.getTicket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ticket = 1;
 * This is a type-conversion wrapper around `getTicket()`
 * @return {string}
 */
proto.arrow.flight.protocol.Ticket.prototype.getTicket_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTicket()));
};


/**
 * optional bytes ticket = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTicket()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.Ticket.prototype.getTicket_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTicket()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.Ticket} returns this
 */
proto.arrow.flight.protocol.Ticket.prototype.setTicket = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.Location}
 */
proto.arrow.flight.protocol.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.Location;
  return proto.arrow.flight.protocol.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.Location}
 */
proto.arrow.flight.protocol.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uri = 1;
 * @return {string}
 */
proto.arrow.flight.protocol.Location.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.arrow.flight.protocol.Location} returns this
 */
proto.arrow.flight.protocol.Location.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.arrow.flight.protocol.FlightEndpoint.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.FlightEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.FlightEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.FlightEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticket: (f = msg.getTicket()) && proto.arrow.flight.protocol.Ticket.toObject(includeInstance, f),
    locationList: jspb.Message.toObjectList(msg.getLocationList(),
    proto.arrow.flight.protocol.Location.toObject, includeInstance),
    expirationTime: (f = msg.getExpirationTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    appMetadata: msg.getAppMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.FlightEndpoint}
 */
proto.arrow.flight.protocol.FlightEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.FlightEndpoint;
  return proto.arrow.flight.protocol.FlightEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.FlightEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.FlightEndpoint}
 */
proto.arrow.flight.protocol.FlightEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.arrow.flight.protocol.Ticket;
      reader.readMessage(value,proto.arrow.flight.protocol.Ticket.deserializeBinaryFromReader);
      msg.setTicket(value);
      break;
    case 2:
      var value = new proto.arrow.flight.protocol.Location;
      reader.readMessage(value,proto.arrow.flight.protocol.Location.deserializeBinaryFromReader);
      msg.addLocation(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpirationTime(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.FlightEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.FlightEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.FlightEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.arrow.flight.protocol.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getLocationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.arrow.flight.protocol.Location.serializeBinaryToWriter
    );
  }
  f = message.getExpirationTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAppMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional Ticket ticket = 1;
 * @return {?proto.arrow.flight.protocol.Ticket}
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.getTicket = function() {
  return /** @type{?proto.arrow.flight.protocol.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.arrow.flight.protocol.Ticket, 1));
};


/**
 * @param {?proto.arrow.flight.protocol.Ticket|undefined} value
 * @return {!proto.arrow.flight.protocol.FlightEndpoint} returns this
*/
proto.arrow.flight.protocol.FlightEndpoint.prototype.setTicket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.arrow.flight.protocol.FlightEndpoint} returns this
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.clearTicket = function() {
  return this.setTicket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.hasTicket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Location location = 2;
 * @return {!Array<!proto.arrow.flight.protocol.Location>}
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.getLocationList = function() {
  return /** @type{!Array<!proto.arrow.flight.protocol.Location>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.arrow.flight.protocol.Location, 2));
};


/**
 * @param {!Array<!proto.arrow.flight.protocol.Location>} value
 * @return {!proto.arrow.flight.protocol.FlightEndpoint} returns this
*/
proto.arrow.flight.protocol.FlightEndpoint.prototype.setLocationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.arrow.flight.protocol.Location=} opt_value
 * @param {number=} opt_index
 * @return {!proto.arrow.flight.protocol.Location}
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.addLocation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.arrow.flight.protocol.Location, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.arrow.flight.protocol.FlightEndpoint} returns this
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.clearLocationList = function() {
  return this.setLocationList([]);
};


/**
 * optional google.protobuf.Timestamp expiration_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.getExpirationTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.arrow.flight.protocol.FlightEndpoint} returns this
*/
proto.arrow.flight.protocol.FlightEndpoint.prototype.setExpirationTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.arrow.flight.protocol.FlightEndpoint} returns this
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.clearExpirationTime = function() {
  return this.setExpirationTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.hasExpirationTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes app_metadata = 4;
 * @return {string}
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.getAppMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes app_metadata = 4;
 * This is a type-conversion wrapper around `getAppMetadata()`
 * @return {string}
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.getAppMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppMetadata()));
};


/**
 * optional bytes app_metadata = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppMetadata()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.getAppMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.FlightEndpoint} returns this
 */
proto.arrow.flight.protocol.FlightEndpoint.prototype.setAppMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.RenewFlightEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.RenewFlightEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.RenewFlightEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.RenewFlightEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    endpoint: (f = msg.getEndpoint()) && proto.arrow.flight.protocol.FlightEndpoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.RenewFlightEndpointRequest}
 */
proto.arrow.flight.protocol.RenewFlightEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.RenewFlightEndpointRequest;
  return proto.arrow.flight.protocol.RenewFlightEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.RenewFlightEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.RenewFlightEndpointRequest}
 */
proto.arrow.flight.protocol.RenewFlightEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.arrow.flight.protocol.FlightEndpoint;
      reader.readMessage(value,proto.arrow.flight.protocol.FlightEndpoint.deserializeBinaryFromReader);
      msg.setEndpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.RenewFlightEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.RenewFlightEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.RenewFlightEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.RenewFlightEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndpoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.arrow.flight.protocol.FlightEndpoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional FlightEndpoint endpoint = 1;
 * @return {?proto.arrow.flight.protocol.FlightEndpoint}
 */
proto.arrow.flight.protocol.RenewFlightEndpointRequest.prototype.getEndpoint = function() {
  return /** @type{?proto.arrow.flight.protocol.FlightEndpoint} */ (
    jspb.Message.getWrapperField(this, proto.arrow.flight.protocol.FlightEndpoint, 1));
};


/**
 * @param {?proto.arrow.flight.protocol.FlightEndpoint|undefined} value
 * @return {!proto.arrow.flight.protocol.RenewFlightEndpointRequest} returns this
*/
proto.arrow.flight.protocol.RenewFlightEndpointRequest.prototype.setEndpoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.arrow.flight.protocol.RenewFlightEndpointRequest} returns this
 */
proto.arrow.flight.protocol.RenewFlightEndpointRequest.prototype.clearEndpoint = function() {
  return this.setEndpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.RenewFlightEndpointRequest.prototype.hasEndpoint = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.FlightData.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.FlightData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.FlightData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.FlightData.toObject = function(includeInstance, msg) {
  var f, obj = {
    flightDescriptor: (f = msg.getFlightDescriptor()) && proto.arrow.flight.protocol.FlightDescriptor.toObject(includeInstance, f),
    dataHeader: msg.getDataHeader_asB64(),
    appMetadata: msg.getAppMetadata_asB64(),
    dataBody: msg.getDataBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.FlightData}
 */
proto.arrow.flight.protocol.FlightData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.FlightData;
  return proto.arrow.flight.protocol.FlightData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.FlightData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.FlightData}
 */
proto.arrow.flight.protocol.FlightData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.arrow.flight.protocol.FlightDescriptor;
      reader.readMessage(value,proto.arrow.flight.protocol.FlightDescriptor.deserializeBinaryFromReader);
      msg.setFlightDescriptor(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDataHeader(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppMetadata(value);
      break;
    case 1000:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDataBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.FlightData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.FlightData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.FlightData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.FlightData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlightDescriptor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.arrow.flight.protocol.FlightDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getDataHeader_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAppMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDataBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1000,
      f
    );
  }
};


/**
 * optional FlightDescriptor flight_descriptor = 1;
 * @return {?proto.arrow.flight.protocol.FlightDescriptor}
 */
proto.arrow.flight.protocol.FlightData.prototype.getFlightDescriptor = function() {
  return /** @type{?proto.arrow.flight.protocol.FlightDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.arrow.flight.protocol.FlightDescriptor, 1));
};


/**
 * @param {?proto.arrow.flight.protocol.FlightDescriptor|undefined} value
 * @return {!proto.arrow.flight.protocol.FlightData} returns this
*/
proto.arrow.flight.protocol.FlightData.prototype.setFlightDescriptor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.arrow.flight.protocol.FlightData} returns this
 */
proto.arrow.flight.protocol.FlightData.prototype.clearFlightDescriptor = function() {
  return this.setFlightDescriptor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.FlightData.prototype.hasFlightDescriptor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data_header = 2;
 * @return {string}
 */
proto.arrow.flight.protocol.FlightData.prototype.getDataHeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data_header = 2;
 * This is a type-conversion wrapper around `getDataHeader()`
 * @return {string}
 */
proto.arrow.flight.protocol.FlightData.prototype.getDataHeader_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDataHeader()));
};


/**
 * optional bytes data_header = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataHeader()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.FlightData.prototype.getDataHeader_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDataHeader()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.FlightData} returns this
 */
proto.arrow.flight.protocol.FlightData.prototype.setDataHeader = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes app_metadata = 3;
 * @return {string}
 */
proto.arrow.flight.protocol.FlightData.prototype.getAppMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes app_metadata = 3;
 * This is a type-conversion wrapper around `getAppMetadata()`
 * @return {string}
 */
proto.arrow.flight.protocol.FlightData.prototype.getAppMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppMetadata()));
};


/**
 * optional bytes app_metadata = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppMetadata()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.FlightData.prototype.getAppMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.FlightData} returns this
 */
proto.arrow.flight.protocol.FlightData.prototype.setAppMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes data_body = 1000;
 * @return {string}
 */
proto.arrow.flight.protocol.FlightData.prototype.getDataBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1000, ""));
};


/**
 * optional bytes data_body = 1000;
 * This is a type-conversion wrapper around `getDataBody()`
 * @return {string}
 */
proto.arrow.flight.protocol.FlightData.prototype.getDataBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDataBody()));
};


/**
 * optional bytes data_body = 1000;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataBody()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.FlightData.prototype.getDataBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDataBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.FlightData} returns this
 */
proto.arrow.flight.protocol.FlightData.prototype.setDataBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 1000, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.PutResult.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.PutResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.PutResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.PutResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    appMetadata: msg.getAppMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.PutResult}
 */
proto.arrow.flight.protocol.PutResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.PutResult;
  return proto.arrow.flight.protocol.PutResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.PutResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.PutResult}
 */
proto.arrow.flight.protocol.PutResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.PutResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.PutResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.PutResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.PutResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes app_metadata = 1;
 * @return {string}
 */
proto.arrow.flight.protocol.PutResult.prototype.getAppMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes app_metadata = 1;
 * This is a type-conversion wrapper around `getAppMetadata()`
 * @return {string}
 */
proto.arrow.flight.protocol.PutResult.prototype.getAppMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppMetadata()));
};


/**
 * optional bytes app_metadata = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppMetadata()`
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.PutResult.prototype.getAppMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.arrow.flight.protocol.PutResult} returns this
 */
proto.arrow.flight.protocol.PutResult.prototype.setAppMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.arrow.flight.protocol.SessionOptionValue.OptionValueCase = {
  OPTION_VALUE_NOT_SET: 0,
  STRING_VALUE: 1,
  BOOL_VALUE: 2,
  INT64_VALUE: 3,
  DOUBLE_VALUE: 4,
  STRING_LIST_VALUE: 5
};

/**
 * @return {proto.arrow.flight.protocol.SessionOptionValue.OptionValueCase}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.getOptionValueCase = function() {
  return /** @type {proto.arrow.flight.protocol.SessionOptionValue.OptionValueCase} */(jspb.Message.computeOneofCase(this, proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.SessionOptionValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.SessionOptionValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SessionOptionValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringValue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    int64Value: jspb.Message.getFieldWithDefault(msg, 3, 0),
    doubleValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    stringListValue: (f = msg.getStringListValue()) && proto.arrow.flight.protocol.SessionOptionValue.StringListValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.SessionOptionValue}
 */
proto.arrow.flight.protocol.SessionOptionValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.SessionOptionValue;
  return proto.arrow.flight.protocol.SessionOptionValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.SessionOptionValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.SessionOptionValue}
 */
proto.arrow.flight.protocol.SessionOptionValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setInt64Value(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 5:
      var value = new proto.arrow.flight.protocol.SessionOptionValue.StringListValue;
      reader.readMessage(value,proto.arrow.flight.protocol.SessionOptionValue.StringListValue.deserializeBinaryFromReader);
      msg.setStringListValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.SessionOptionValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.SessionOptionValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SessionOptionValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSfixed64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getStringListValue();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.arrow.flight.protocol.SessionOptionValue.StringListValue.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.SessionOptionValue.StringListValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.SessionOptionValue.StringListValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.SessionOptionValue.StringListValue}
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.SessionOptionValue.StringListValue;
  return proto.arrow.flight.protocol.SessionOptionValue.StringListValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.SessionOptionValue.StringListValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.SessionOptionValue.StringListValue}
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.SessionOptionValue.StringListValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.SessionOptionValue.StringListValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.arrow.flight.protocol.SessionOptionValue.StringListValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.arrow.flight.protocol.SessionOptionValue.StringListValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.arrow.flight.protocol.SessionOptionValue.StringListValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.StringListValue.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * optional string string_value = 1;
 * @return {string}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.arrow.flight.protocol.SessionOptionValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.arrow.flight.protocol.SessionOptionValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 1, proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bool_value = 2;
 * @return {boolean}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.arrow.flight.protocol.SessionOptionValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.arrow.flight.protocol.SessionOptionValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sfixed64 int64_value = 3;
 * @return {number}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.getInt64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.arrow.flight.protocol.SessionOptionValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.setInt64Value = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.arrow.flight.protocol.SessionOptionValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.clearInt64Value = function() {
  return jspb.Message.setOneofField(this, 3, proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.hasInt64Value = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double double_value = 4;
 * @return {number}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.getDoubleValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.arrow.flight.protocol.SessionOptionValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.setDoubleValue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.arrow.flight.protocol.SessionOptionValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.clearDoubleValue = function() {
  return jspb.Message.setOneofField(this, 4, proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StringListValue string_list_value = 5;
 * @return {?proto.arrow.flight.protocol.SessionOptionValue.StringListValue}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.getStringListValue = function() {
  return /** @type{?proto.arrow.flight.protocol.SessionOptionValue.StringListValue} */ (
    jspb.Message.getWrapperField(this, proto.arrow.flight.protocol.SessionOptionValue.StringListValue, 5));
};


/**
 * @param {?proto.arrow.flight.protocol.SessionOptionValue.StringListValue|undefined} value
 * @return {!proto.arrow.flight.protocol.SessionOptionValue} returns this
*/
proto.arrow.flight.protocol.SessionOptionValue.prototype.setStringListValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.arrow.flight.protocol.SessionOptionValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.arrow.flight.protocol.SessionOptionValue} returns this
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.clearStringListValue = function() {
  return this.setStringListValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arrow.flight.protocol.SessionOptionValue.prototype.hasStringListValue = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.SetSessionOptionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.SetSessionOptionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.SetSessionOptionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SetSessionOptionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionOptionsMap: (f = msg.getSessionOptionsMap()) ? f.toObject(includeInstance, proto.arrow.flight.protocol.SessionOptionValue.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.SetSessionOptionsRequest}
 */
proto.arrow.flight.protocol.SetSessionOptionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.SetSessionOptionsRequest;
  return proto.arrow.flight.protocol.SetSessionOptionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.SetSessionOptionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.SetSessionOptionsRequest}
 */
proto.arrow.flight.protocol.SetSessionOptionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSessionOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.arrow.flight.protocol.SessionOptionValue.deserializeBinaryFromReader, "", new proto.arrow.flight.protocol.SessionOptionValue());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.SetSessionOptionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.SetSessionOptionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.SetSessionOptionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SetSessionOptionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.arrow.flight.protocol.SessionOptionValue.serializeBinaryToWriter);
  }
};


/**
 * map<string, SessionOptionValue> session_options = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.arrow.flight.protocol.SessionOptionValue>}
 */
proto.arrow.flight.protocol.SetSessionOptionsRequest.prototype.getSessionOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.arrow.flight.protocol.SessionOptionValue>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.arrow.flight.protocol.SessionOptionValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.arrow.flight.protocol.SetSessionOptionsRequest} returns this
 */
proto.arrow.flight.protocol.SetSessionOptionsRequest.prototype.clearSessionOptionsMap = function() {
  this.getSessionOptionsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.SetSessionOptionsResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.SetSessionOptionsResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsMap: (f = msg.getErrorsMap()) ? f.toObject(includeInstance, proto.arrow.flight.protocol.SetSessionOptionsResult.Error.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.SetSessionOptionsResult}
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.SetSessionOptionsResult;
  return proto.arrow.flight.protocol.SetSessionOptionsResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.SetSessionOptionsResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.SetSessionOptionsResult}
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getErrorsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.arrow.flight.protocol.SetSessionOptionsResult.Error.deserializeBinaryFromReader, "", new proto.arrow.flight.protocol.SetSessionOptionsResult.Error());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.SetSessionOptionsResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.SetSessionOptionsResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.arrow.flight.protocol.SetSessionOptionsResult.Error.serializeBinaryToWriter);
  }
};


/**
 * @enum {number}
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.ErrorValue = {
  UNSPECIFIED: 0,
  INVALID_NAME: 1,
  INVALID_VALUE: 2,
  ERROR: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.SetSessionOptionsResult.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.SetSessionOptionsResult.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.SetSessionOptionsResult.Error}
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.SetSessionOptionsResult.Error;
  return proto.arrow.flight.protocol.SetSessionOptionsResult.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.SetSessionOptionsResult.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.SetSessionOptionsResult.Error}
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.arrow.flight.protocol.SetSessionOptionsResult.ErrorValue} */ (reader.readEnum());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.SetSessionOptionsResult.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.SetSessionOptionsResult.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ErrorValue value = 1;
 * @return {!proto.arrow.flight.protocol.SetSessionOptionsResult.ErrorValue}
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.Error.prototype.getValue = function() {
  return /** @type {!proto.arrow.flight.protocol.SetSessionOptionsResult.ErrorValue} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.arrow.flight.protocol.SetSessionOptionsResult.ErrorValue} value
 * @return {!proto.arrow.flight.protocol.SetSessionOptionsResult.Error} returns this
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.Error.prototype.setValue = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * map<string, Error> errors = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.arrow.flight.protocol.SetSessionOptionsResult.Error>}
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.prototype.getErrorsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.arrow.flight.protocol.SetSessionOptionsResult.Error>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.arrow.flight.protocol.SetSessionOptionsResult.Error));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.arrow.flight.protocol.SetSessionOptionsResult} returns this
 */
proto.arrow.flight.protocol.SetSessionOptionsResult.prototype.clearErrorsMap = function() {
  this.getErrorsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.GetSessionOptionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.GetSessionOptionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.GetSessionOptionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.GetSessionOptionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.GetSessionOptionsRequest}
 */
proto.arrow.flight.protocol.GetSessionOptionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.GetSessionOptionsRequest;
  return proto.arrow.flight.protocol.GetSessionOptionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.GetSessionOptionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.GetSessionOptionsRequest}
 */
proto.arrow.flight.protocol.GetSessionOptionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.GetSessionOptionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.GetSessionOptionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.GetSessionOptionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.GetSessionOptionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.GetSessionOptionsResult.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.GetSessionOptionsResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.GetSessionOptionsResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.GetSessionOptionsResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionOptionsMap: (f = msg.getSessionOptionsMap()) ? f.toObject(includeInstance, proto.arrow.flight.protocol.SessionOptionValue.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.GetSessionOptionsResult}
 */
proto.arrow.flight.protocol.GetSessionOptionsResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.GetSessionOptionsResult;
  return proto.arrow.flight.protocol.GetSessionOptionsResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.GetSessionOptionsResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.GetSessionOptionsResult}
 */
proto.arrow.flight.protocol.GetSessionOptionsResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSessionOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.arrow.flight.protocol.SessionOptionValue.deserializeBinaryFromReader, "", new proto.arrow.flight.protocol.SessionOptionValue());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.GetSessionOptionsResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.GetSessionOptionsResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.GetSessionOptionsResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.GetSessionOptionsResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.arrow.flight.protocol.SessionOptionValue.serializeBinaryToWriter);
  }
};


/**
 * map<string, SessionOptionValue> session_options = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.arrow.flight.protocol.SessionOptionValue>}
 */
proto.arrow.flight.protocol.GetSessionOptionsResult.prototype.getSessionOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.arrow.flight.protocol.SessionOptionValue>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.arrow.flight.protocol.SessionOptionValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.arrow.flight.protocol.GetSessionOptionsResult} returns this
 */
proto.arrow.flight.protocol.GetSessionOptionsResult.prototype.clearSessionOptionsMap = function() {
  this.getSessionOptionsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.CloseSessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.CloseSessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.CloseSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.CloseSessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.CloseSessionRequest}
 */
proto.arrow.flight.protocol.CloseSessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.CloseSessionRequest;
  return proto.arrow.flight.protocol.CloseSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.CloseSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.CloseSessionRequest}
 */
proto.arrow.flight.protocol.CloseSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.CloseSessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.CloseSessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.CloseSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.CloseSessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrow.flight.protocol.CloseSessionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.arrow.flight.protocol.CloseSessionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrow.flight.protocol.CloseSessionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.CloseSessionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrow.flight.protocol.CloseSessionResult}
 */
proto.arrow.flight.protocol.CloseSessionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrow.flight.protocol.CloseSessionResult;
  return proto.arrow.flight.protocol.CloseSessionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrow.flight.protocol.CloseSessionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrow.flight.protocol.CloseSessionResult}
 */
proto.arrow.flight.protocol.CloseSessionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.arrow.flight.protocol.CloseSessionResult.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrow.flight.protocol.CloseSessionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrow.flight.protocol.CloseSessionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrow.flight.protocol.CloseSessionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrow.flight.protocol.CloseSessionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.arrow.flight.protocol.CloseSessionResult.Status = {
  UNSPECIFIED: 0,
  CLOSED: 1,
  CLOSING: 2,
  NOT_CLOSEABLE: 3
};

/**
 * optional Status status = 1;
 * @return {!proto.arrow.flight.protocol.CloseSessionResult.Status}
 */
proto.arrow.flight.protocol.CloseSessionResult.prototype.getStatus = function() {
  return /** @type {!proto.arrow.flight.protocol.CloseSessionResult.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.arrow.flight.protocol.CloseSessionResult.Status} value
 * @return {!proto.arrow.flight.protocol.CloseSessionResult} returns this
 */
proto.arrow.flight.protocol.CloseSessionResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.arrow.flight.protocol.CancelStatus = {
  CANCEL_STATUS_UNSPECIFIED: 0,
  CANCEL_STATUS_CANCELLED: 1,
  CANCEL_STATUS_CANCELLING: 2,
  CANCEL_STATUS_NOT_CANCELLABLE: 3
};

goog.object.extend(exports, proto.arrow.flight.protocol);
